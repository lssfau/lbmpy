stages:
  - "Code Quality"
  - "Tests"
  - "Prerelease-Tests"
  - integration
  - nightly
  - docs
  - deploy

# --------------------------  Code Quality --------------------------------------------------------------------------------


# Linter for code formatting
flake8-lint:
  stage: "Code Quality"
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:alpine
  script:
    - nox -s lint
  tags:
    - docker


# --------------------------  Tests --------------------------------------------------------------------------------

# Normal test - runs on every commit all but "long run" tests
testsuite-cuda-py3.10:
  stage: "Tests"
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:ubuntu24.04-cuda12.6
  needs: []
  script:
    - mkdir -p ~/.config/matplotlib
    - echo "backend:template" > ~/.config/matplotlib/matplotlibrc
    - nox -s "testsuite_gpu-3.10(cupy12)"
  tags:
    - docker
    - cuda
    - cudaComputeCapability6.1
    - AVX
  coverage: /Total coverage:\s\d+.\d+\%/
  artifacts:
    when: always
    paths:
      - htmlcov
      - test-report
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml


testsuite-cpu-py3.13:
  stage: "Tests"
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:alpine
  needs: []
  script:
    - mkdir -p ~/.config/matplotlib
    - echo "backend:template" > ~/.config/matplotlib/matplotlibrc
    - nox -s "testsuite_cpu-3.13"
  tags:
    - docker
    - AVX
  artifacts:
    when: always
    paths:
      - test-report
    reports:
      junit: report.xml


# Normal test with longruns
tests-and-coverage-with-longrun:
  stage: "Tests"
  when: manual
  allow_failure: true
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/full
  script:
    # - pip install sympy --upgrade
    - export NUM_CORES=$(nproc --all)
    - mkdir -p ~/.config/matplotlib
    - echo "backend:template" > ~/.config/matplotlib/matplotlibrc
    - mkdir public
    - pip install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@i10git.cs.fau.de/pycodegen/pystencils.git@master#egg=pystencils
    - env
    - pip list
    - py.test -v -n $NUM_CORES
  tags:
    - docker
    - cuda
    - cudaComputeCapability6.1
    - AVX

# --------------------------  Nightly and Pre-Release Tests --------------------------------------------------------------------------------

# Test against latest pystencils 2.0 development version
pystencils-2.0dev:
  stage: "Prerelease-Tests"
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:ubuntu24.04-cuda12.6
  allow_failure: true
  needs: []
  script:
    - mkdir -p ~/.config/matplotlib
    - echo "backend:template" > ~/.config/matplotlib/matplotlibrc
    - nox -s "testsuite_pystencils2(cupy12)"
  tags:
    - docker
    - AVX
    - cuda
    - cudaComputeCapability6.1
  artifacts:
    when: always
    paths:
      - test-report
    reports:
      junit: report.xml

minimal-sympy-master:
  stage: "Prerelease-Tests"
  needs: []
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:alpine
  script:
    - nox -s quicktest -P 3.13 -- --sympy-master
  allow_failure: true
  tags:
    - docker

# pycodegen-integration:
#   image: i10git.cs.fau.de:5005/pycodegen/pycodegen/full
#   stage: integration
#   when: manual
#   allow_failure: true
#   script:
#     - env
#     - pip list
#     - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@i10git.cs.fau.de/pycodegen/pycodegen.git
#     - cd pycodegen
#     - git submodule sync --recursive
#     - git submodule update --init --recursive
#     - git submodule foreach git fetch origin   # compare the latest master version!
#     - git submodule foreach git reset --hard origin/master
#     - cd lbmpy
#     - git remote add test $CI_REPOSITORY_URL
#     - git fetch test
#     - git reset --hard $CI_COMMIT_SHA
#     - cd ..
#     - pip install -e pystencils/
#     - pip install -e lbmpy/
#     - ./install_walberla.sh
#     # build all integration tests
#     - cd walberla/build/
#     - make -j $NUM_CORES MicroBenchmarkGpuLbm LbCodeGenerationExample
#     - cd apps/benchmarks/UniformGridGPU
#     - make -j $NUM_CORES
#     - cd ../UniformGridCPU
#     - make -j $NUM_CORES

#   tags:
#     - docker
#     - cuda
#     - cudaComputeCapability6.1
#     - AVX


# -------------------- Scheduled Tasks --------------------------------------------------------------------------


nightly-sympy:
  stage: nightly
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/latest_python
  before_script:
    - pip install -e .
    - pip install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@i10git.cs.fau.de/pycodegen/pystencils.git@master#egg=pystencils
    - pip install --upgrade --pre sympy
  script:
    - env
    - pip list
    - export NUM_CORES=$(nproc --all)
    - mkdir -p ~/.config/matplotlib
    - echo "backend:template" > ~/.config/matplotlib/matplotlibrc
    - mkdir public
    - pytest -v -n $NUM_CORES -m "not longrun" --junitxml=report.xml
  tags:
    - docker
    - AVX
    - cuda
    - cudaComputeCapability6.1
  artifacts:
    when: always
    reports:
      junit: report.xml


# -------------------- Documentation and deploy ------------------------------------------------------------------------

build-documentation:
  stage: docs
  needs: []
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/documentation
  before_script:
    - pip install -e .
  script:
    - export PYTHONPATH=`pwd`
    - pip install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@i10git.cs.fau.de/pycodegen/pystencils.git@master#egg=pystencils
    - mkdir html_doc
    - sphinx-build -W -b html doc html_doc
  tags:
    - docker
    - cuda
    - cudaComputeCapability6.1
  artifacts:
    paths:
      - html_doc


pages:
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/full
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_PROJECT_PATH == "pycodegen/lbmpy" && $CI_COMMIT_BRANCH == "master"'
  stage: deploy
  needs: ["testsuite-cuda-py3.10", "build-documentation"]
  script:
    - ls -l
    - mv htmlcov html_doc/.
    - mv html_doc public  # folder has to be named "public" for gitlab to publish it
  artifacts:
    paths:
      - public
  tags:
    - docker
